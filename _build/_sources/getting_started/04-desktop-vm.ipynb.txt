{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d5843b34",
   "metadata": {},
   "source": [
    "# Desktop VM’s\n",
    "The GEOAnalytics platform provides space to create your own personal Ubuntu desktop environments and makes these desktops available through a web browser. The ‘desktops in a browser’ means users can use Ubuntu desktop applications to explore platform data, develop applications and conduct analytics without needing to download data to a local PC. The Ubuntu desktops are customizable but pre-configured with applications such as the Sentinel Application Toolbox (SNAP), and Quantum GIS for geospatial data viewing and analysis.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0f66d2b",
   "metadata": {},
   "source": [
    "## 1. Starting a Remote Desktop Session\n",
    "\n",
    "### 1.1 Desktop Options\n",
    "The Desktop VM available on our Platform contains the Ubuntu operating system, with multiple options for the machine type and quantity of GPUs to choose from. \n",
    "\n",
    "* Here's a table displaying the preset options for the **machine type**:\n",
    "\n",
    "|   CPUs      |   RAM Size  |\n",
    "|  :----:     |   :----:    |\n",
    "|     1       |  3.75 GB    |\n",
    "|     2       |   7.5 GB    |\n",
    "|     4       |    15 GB    |\n",
    "|     8       |    30 GB    |\n",
    "|    16       |    60 GB    |\n",
    "|    32       |   120 GB    |\n",
    "\n",
    "* There are 4 options for the **Number of GPUs: 0, 1, 2, or 4.**\n",
    "\n",
    "* You can also select the **desktop image** if you have an existing image from a previous session saved. (Otherwise, there will only be one option available)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8886f029",
   "metadata": {},
   "source": [
    "Now, let's access the Remote Desktop VM by selecting the \"Desktop Apps\" tab from the main platform dashboard, which will lead to https://app.geoanalytics.ca/apps. From here, you get the options as mentioned above to customize your virtual machine. Select the presets depending on your own preference and click on the button **\"START MY DESKTOP\"**. This will send a request to Google for access to that Desktop. \n",
    "\n",
    "<img src=\"../images/getting_started_images/04_creating-vm.gif\">\n",
    "\n",
    "Note the three labels at the bottom: The **Pod Name** indicating the name of the virtual machine you are assigned, the **Pod Status** indicating whether the virtual machine is running or not, and the **External IP address** where the virtual machine is running. Before starting up your first desktop session, all these three will be empty."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f327c99",
   "metadata": {},
   "source": [
    "*There are two ways to start up your Remote Desktop session, let's take a look at both these methods.*\n",
    "\n",
    "### 1.2 Login to Remote Desktop VM through Browser\n",
    "The first way is to log in through the Brower by clicking on the **\"TAKE ME TO MY DESKTOP\"** button once the desktop server is running. This will open a new tab to Apache Guacamole which is a clientless remote desktop gateway. Enter in your GEOAnalytics Canada username and password to open the Desktop VM in a new browser. \n",
    "\n",
    "<img src='../images/getting_started_images/04_login-apache.gif'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c8fb44e",
   "metadata": {},
   "source": [
    "### 1.3 Login To Remote Desktop VM through SSH\n",
    "\n",
    "Another way to login is by the Secure Shell Protocol (SSH). You can SSH into the remote desktop directly from the terminal. SSH is useful because it does not load the entire Virtual machine interface, which is great for just executing codes and terminal commands and when it is not neccesary to launch applications.\n",
    "\n",
    "Any GEOAnalytics user can SSH into their remote server directly from the terminal window.\n",
    "\n",
    "Run the command `ssh <username>@<host>` in your terminal, where the username represents your GEOAnalytics Canada username and the host refers to the computer you want to access which in our case is the External IP Address. After running the command, you will be required to input your GEOAnalytics Canada password. \n",
    "Below is an image capturing the connection to the remote desktop.\n",
    "\n",
    "<img src='../images/getting_started_images/04_ssh.png'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89c1ce54",
   "metadata": {},
   "source": [
    "If you notice in the image above, a few commands are used to check which directory ssh connects us to and to change directory into the same path as the Browser version. \n",
    "\n",
    "The terminal opened in the Browser Desktop VM, the initial file path is `/home/abc`, so the path in the ssh connection was adjusted to the same path.\n",
    "\n",
    "<img src='../images/getting_started_images/04_vm-path.png'>\n",
    "\n",
    "**Note: SSH and Browser both have access to root privileges.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c39f8fc3",
   "metadata": {},
   "source": [
    "## 2. The Remote Desktop Environment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7a98316",
   "metadata": {},
   "source": [
    "### 2.1 Data Structure in the Desktop VM\n",
    "To allow for easy access to EO datasets available on the platform, EO data stores have been mounted into each user’s desktop environment. The pre-configured data access and storage mount points are the same folders mentioned in previous tutorials.\n",
    "\n",
    "- **gcp-public-data-landsat** - Landsat data as provided by Google’s public data program. (Read-only)\n",
    "- **gcp-public-data-sentinel-2** - Sentinel-2 data as provided by Google’s public data program. (Read-only)\n",
    "- **geoanalytics_data** - EO data collections available to all users of GEOAnalytics. T(Read-only)\n",
    "- **geoanalytics_user_shared_data** - All platform EO data collections including raw datasets and pre-processed datasets. (Read and write for all GEOAnalytics Canada users)\n",
    "- **geoanalytics_{username}** - A user’s personal network file system where only the logged in user can read or write to their own personal storage directory.\n",
    "\n",
    "In the desktop environment, the first 4 folders can be accessed from the *File System* devices tab, while the user's private folder can be found in the **'/home/abc'** directory.\n",
    "\n",
    "<img src='../images/getting_started_images/04_folders-vm.gif'>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eccd8f7",
   "metadata": {},
   "source": [
    "\n",
    "### 2.2 Showing information about GPUs \n",
    "To understand the GPUs (Graphic Processing Unit) being used in the Desktop server, `nvidia-smi` command line tools can be used because the GPUs used in the Desktop VMs are **\"NVIDIA Tesla P4.\"** It is the NVIDIA System Interface which helps manage and monitor the NVIDIA GPU devices.\n",
    "\n",
    "To execute the \"nvidia-smi\" commands, we must first export the paths into the directory's `.bashrc` file. \n",
    "Run the two commands below in the Desktop's terminal to enable the nvidia-smi command:\n",
    "\n",
    "* `export PATH=$PATH:/usr/local/nvidia/bin:/usr/local/cuda/bin`\n",
    "* `export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64`\n",
    "\n",
    "Now, you can run the nvidia-smi commands to get information and manage the GPU devices. Here are a few below:\n",
    "\n",
    "* `nvidia-smi`: To display basic  information of all the GPUs.\n",
    "* `nvidia-smi -L`: To list all available NVIDIA devices.\n",
    "* `nvidia-smi -i 0 -q`: To list all available data on a particular GPU, specify the ID of the card with -i (ID is 0).\n",
    "\n",
    "<img src='../images/getting_started_images/04_gpu-info.png'>\n",
    "\n",
    "One thing to note is that the \"export PATH\" commands only enables the `nvidia-smi` commands temporarily, for the current terminal session. This means that once you close the terminal window and open a new terminal, you will need to run those commands again. To avoid this tedious task for everytime you open a new terminal session, we can append the two commands to the Bash Shell Script, **.bashrc** file by executing the two commands below in terminal and enable the `nvidia-smi` commands for the entire Desktop session:\n",
    "\n",
    "* `echo 'export PATH=$PATH:/usr/local/nvidia/bin:/usr/local/cuda/bin' >> ~/.bashrc`\n",
    "* `echo 'export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64' >> ~/.bashrc`\n",
    "\n",
    "For more queries and commands to manage the system's GPU devices, take a look at these websites below:\n",
    "\n",
    "- https://www.microway.com/hpc-tech-tips/nvidia-smi_control-your-gpus/\n",
    "- https://developer.download.nvidia.com/compute/DCGM/docs/nvidia-smi-367.38.pdf\n",
    "- https://nvidia.custhelp.com/app/answers/detail/a_id/3751/~/useful-nvidia-smi-queries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f3cd5ad",
   "metadata": {},
   "source": [
    "## 3. Working in the Desktop VM\n",
    "\n",
    "### 3.1 Installing Software using APT-GET\n",
    "Within the Desktop environment, you can install any software or application you require for your projects. Let's install the Syder IDE (Integrate Development Environment, an open-source Python IDE that’s optimized for data science workflows and well-equipped with Python data science libraries like SciPy, NumPy, and Matplotlib.\n",
    "\n",
    "We will be using **apt-get** which is the command-line tool for handling packages and provides functions such as installing, removing, and updating packages on Linux systems. \n",
    "\n",
    "* First we must execute the `sudo apt-get update` command which is used to download package information from all configured sources. \n",
    "* The, run the command `sudo apt-get install spyder` in terminal to install Spyder on your Desktop Server.\n",
    "* Then type the command `spyder` to open and run the application. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "689300c0",
   "metadata": {},
   "source": [
    "### 3.2 Installing Miniconda \n",
    "Miniconda is an mini-installer, a smaller version of Anaconda containing only conda, its dependencies, and Python. Check by running `conda --version` to see if Miniconda is already available in your virtual machine. If it returns a conda version, then you don't need to install it!\n",
    "\n",
    "Now since we are working with a Linux Operating System, use the Installation Guide for Linux provided by the Conda Documentation to properly install the environment manager. \n",
    "https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\n",
    "\n",
    "Here is a quick screenshot capturing the steps to install within the Desktop server. \n",
    "<img src='../images/getting_started_images/04_miniconda-install.png'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02480fa3",
   "metadata": {},
   "source": [
    "### 3.3 Setting up the Python Environment\n",
    "\n",
    "The Desktop Virtual Machine does not have the notebook environment set-up already as it is in JupyterHub, so to be able to use all the packages configured as in JupyterHub, you can recreate the environment with the following steps:\n",
    "\n",
    "1. Get the **Jupyterhub API token** by opening a terminal on *lab.geoanalytics.ca* and run the following command: `echo $JUPYTERHUB_API_TOKEN`. This will return a token to be used for the next step.\n",
    "2. Within the remote desktop system, run the following command in the terminal. `export JUPYTERHUB_API_TOKEN=result from previous command`\n",
    "3. Create the JupyterHub environment by copying the **\"environment.yml\"** file into `/home/abc/` folder of the Desktop VM, then running the following commands to create and activate the environment.\n",
    "    1. `conda env create -f environment.yml`\n",
    "    2. `conda activate pangeo`\n",
    "\n",
    "Congratulations! You now have pangeo environment running in your Desktop server. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19fdf720",
   "metadata": {},
   "source": [
    "### 3.4 Launching Dask Clusters\n",
    "Once you're in the Conda environment created above, you can work on your projects on the Desktop with access to all the same packages as Jupyter. Let's perform a small task of creating a Dask cluster within the environment, similar to the exercises from the Jupyter Notebook.  \n",
    "\n",
    "First execute the command `jupyter notebook` within terminal to launch a Python notebook where you can run you Dask clusters from. Now open the `04_1-dask-clusters.ipynb` jupyter notebook which contains code for creating a Dask cluster. Follow along with the notebook until the exercise points back to this section.\n",
    "\n",
    "<img src='../images/getting_started_images/04_dask-vm.png'>\n",
    "\n",
    "\n",
    "For the next step, we will see if we can connect to the Dask cluster, created in the Desktop VM, in this notebook. First import the Dask Gateway. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3519de22",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dask_gateway import Gateway\n",
    "gateway = Gateway(\"http://traefik-dask-gateway.geoanalytics.ca/services/dask-gateway/\", auth=\"jupyterhub\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "622ca4e2",
   "metadata": {},
   "source": [
    "Next, we will connect to the cluster according to its name. If you are unsure of the active clusters' names, you can list them using the built-in `gateway.list_clusters() function.`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "508252a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[ClusterReport<name=pangeo.298fa41b3c6a48bca9ca45fff3671685, status=RUNNING>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters = gateway.list_clusters()\n",
    "clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "88963423",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2957ce5214be4cd6aab50552f99f612d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HTML(value='<h2>GatewayCluster</h2>'), HBox(children=(HTML(value='\\n<div>\\n<style scoped>\\n    …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cluster = gateway.connect(clusters[0].name) #connecting by the 'name' key\n",
    "cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ff5fce6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "client = cluster.get_client()\n",
    "client"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bed5dcb",
   "metadata": {},
   "source": [
    "If you were able to run through the cells above, then you successfully connected to an existing Dask cluster! **Make sure to shut down the cluster when you're done working with it!**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a373f36",
   "metadata": {},
   "source": [
    "### 3.2 Using Applications\n",
    "\n",
    "Applications can be opened and used for geospatial data analysis. As an exercise, launch the Quantum GIS (QGIS) application, initialize a new project, and load files from one of the folders we have previously explored.\n",
    "\n",
    "<img src='../images/getting_started_images/04_qgis-vm.gif'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ac92cd8",
   "metadata": {},
   "source": [
    "## 4. Closing the Remote Desktop Session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55c2abd5",
   "metadata": {},
   "source": [
    "At the end of your session, ***always make sure to terminate the desktop server to save resources.***\n",
    "\n",
    "There are two options when terminating, whether you would like to save the current session or disconnect without saving any work. \n",
    "\n",
    "**By saving your session, the following actions will occur:**\n",
    "\n",
    "* A new image will be created for future use with the remote desktop.\n",
    "* Everything in the remote desktop will be saved except for any docker images/containers.\n",
    "* Saving your remote desktop session can take up to 20 minutes.\n",
    "* Your desktop will be terminated.\n",
    "\n",
    "**By not saving your session, the following actions will occur:**\n",
    "\n",
    "* Anything done during your current remote desktop session will not be saved, except for data written to your personal storage directory (/home/abc/geoanalytics_{username}) or to certain mount points (mounted object stores). Any applications installed will not be saved.\n",
    "* Your desktop will be terminated.\n",
    "\n",
    "\n",
    "<img src='../images/getting_started_images/04_shutdown-vm.gif'>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "geoanalytics",
   "language": "python",
   "name": "geoanalytics"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
